// Given fghk form a pullback

.type ob <: number
.type morph <: number
/*
.decl obj(a : ob)
obj("a").
obj("b").
obj("c").
obj("d").

.decl hom(f : morph, a : ob, b: ob)
hom("f", "a", "b").
hom("g", "b", "d").
hom("h", "a", "c").
hom("k", "c", "d").
*/
.decl obj(a : ob)
obj(-1).
obj(-2).
obj(-3).
obj(-4).

.decl hom(f : morph, a : ob, b: ob)
hom(-5, -1, -2).
hom(-6, -2, -4).
hom(-7, -1, -3).
hom(-8, -3, -4).

.decl comp(f : morph, g : morph, fg : morph)
comp(f,g, $) :- hom(f,a,b), hom(g,b,c). // as(1000 + $, morph)

// assocaitivity
equiv(fgh,fgh1) :- comp(f,g,fg), comp(fg,h,fgh),
                   comp(g,h,gh), comp(f, gh, fgh1).
.output comp

.decl id(a : ob, ida: morph)
id(a, $) :- obj(a).
equiv(ida,ida1) :- id(a,ida), id(a,ida1). // uniqueness of id, aka congruence closure. id is a function
hom(ida,a,a) :- id(a,ida).

// identity absorption
equiv(f,idf) :- id(a,ida),  comp(ida,f,idf), hom(f,a,_).
equiv(f,idf) :- id(b,idb),  comp(f, idb, idf), hom(f,_,b).

.output id
.output equiv
// typing of compose - makes comp and hom recursive.
//hom(k,a,c) :- comp(f,g,k), hom(f,a,b), hom(g,b,c).

//comp( "f", "g", "fg").
//comp( "h", "k", "hk").

// Commuting square
.decl equiv( f:morph, g:morph ) eqrel
//equiv("fg", "hk").
equiv(fg, hk) :- comp(-5,-6, fg), comp(-7,-8, hk).

// pullback condition
// forall obj e,with commuting sqaure 
// :- ob(e),

.decl pullback(e : ob, q1: morph, q2 : morph, u:morph)
// existance of morphism
pullback(e,q1,q2,$) :- obj(e), hom(q1, e, -3), hom(q2, e, -2),
    comp(q1, -6, q1g), comp(q2, -8, q2k), equiv(q1g, q2k). // given square

// has triangles
//equiv(uf, q1) :- pullback(e,q1,q2,u), comp(u, -5, uf).
//equiv(uh, q2) :- pullback(e,q1,q2,u), comp(u, -7, uh).

// Is unique
// pullback :- obj, hom, ... , triangle,, tirangle
// equiv(u, u1) :- pullback(e,q1,q2), pullback(e,q1,q2, )
// Exists unique morph u

// But I think I should be expanding more using more equiv?


.output pullback






// forall a, ida exists
// id(A, $) :- ob(a).

// Monic Assumption.


// Goal Formula

// Monic
// forall object, morph1, morph2,  ( m1 . h = m2 . h => m1 = m2 )
// :- ob(A), 
obj(-9). // unknown object
hom(-10, -9, -1). // unknown fresh morphism
hom(-11, -9, -1). // unknown fresh morphism2
equiv(qh,q2h) :- comp(-10, -7, qh), comp(-11, -7, q2h).
// and now check equiv for equiv(-10,-11). 
// If it is in there, you've proved it.


// square




// Is this true?
// forall e, 