#define term(a) eq(a,a)

.type AExpr = Lit {n : number}
            | Plus {a: AExpr, b : AExpr}

.decl eq(x : AExpr, y : AExpr) eqrel
//.limitsize eq(n=4)

//congruence
eq(t1,t2) :- t1 = $Plus(a1,b1), t2 = $Plus(a2,b2), term(t1), eq(a1,a2), eq(b1,b2).

// termification
term(a), term(b) :- term($Plus(a,b)).

// constant propagation
eq(t, $Lit(a + b)) :- t = $Plus($Lit(a), $Lit(b)), term(t).

// Commutativity of addition
eq($Plus(a,b), e) :- eq($Plus(b,a), e).

// Associativity
eq($Plus($Plus(a,b),c), e) :- eq($Plus(a,$Plus(b,c)), e).
eq($Plus(a,$Plus(b,c)), e) :- eq($Plus($Plus(a,b),c), e).

// Initialization
term($Plus($Lit(3), $Lit(4))).

.output eq
