#define term(a) eq(a,a)
#define RW(a,b) eq(b, myextremelyfreshvalue) :- eq(a, myextremelyfreshvalue)
#define BIRW(a,b) RW(a,b). RW(b,a)

.type AExpr = Lit {n : number}
            | Var {x : symbol}
            | Plus {a: AExpr, b : AExpr}
            | Mul {a: AExpr, b : AExpr}

.decl eq(x : AExpr, y : AExpr) eqrel
//.limitsize eq(n=4)

//congruence
eq(t1,t2) :- t1 = $Plus(a1,b1), t2 = $Plus(a2,b2), term(t1), eq(a1,a2), eq(b1,b2). // subtle: include term(t2) or not
eq(t1,t2) :- t1 = $Mul(a1,b1), t2 = $Mul(a2,b2), term(t1), eq(a1,a2), eq(b1,b2).

// termification
term(a), term(b) :- term($Plus(a,b)).
term(a), term(b) :- term($Mul(a,b)).

// constant propagation
eq(t, $Lit(a + b)) :- t = $Plus($Lit(a), $Lit(b)), term(t).
eq(t, $Lit(a * b)) :- t = $Mul($Lit(a), $Lit(b)), term(t).

// Commutativity
eq($Plus(a,b), e) :- eq($Plus(b,a), e).
eq($Mul(a,b), e)  :- eq($Mul(b,a), e).

// Associativity
BIRW( $Plus($Plus(a,b),c), $Plus(a,$Plus(b,c)) ).
eq($Plus(a,$Plus(b,c)), e) :- eq($Plus($Plus(a,b),c), e).
eq($Mul($Mul(a,b),c), e) :- eq($Mul(a,$Mul(b,c)), e).
eq($Mul(a,$Mul(b,c)), e) :- eq($Mul($Mul(a,b),c), e).

// distributivity
eq($Plus($Mul(a,b), $Mul(a,c)), e) :- eq($Mul(a, $Plus(b,c)), e).
eq($Mul(a, $Plus(b,c)), e)     :- eq($Plus($Mul(a,b), $Mul(a,c)), e).


.decl size(t : AExpr, s : unsigned)
size($Lit(a),1) :- term($Lit(a)).
size($Var(a),1) :- term($Var(a)).
size(t, 1 + sa + sb) :-  t = $Mul(a,b), term(t), size(a,sa), size(b,sb).
size(t, 1 + sa + sb) :-  t = $Plus(a,b), term(t), size(a,sa), size(b,sb).



// Initialization
//term($Plus($Lit(3), $Lit(4))).
#define QUERY $Mul($Lit(4),$Plus($Var("x"), $Lit(4)))
term(QUERY).


.decl res(t : AExpr)
res(t) :- eq(QUERY, t) , minsz = min n: {eq(QUERY,t2), size(t2,n)}, size(t, minsz).

.output res
//.output eq 
//.output terms 